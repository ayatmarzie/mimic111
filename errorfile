ValueError                                Traceback (most recent call last)
Cell In[10], line 29
     27 # Train the model in batches
     28 batch_size = 32
---> 29 model.fit(
     30     [X_temporal_train, X_static_train], y_train,
     31     validation_data=([X_temporal_test, X_static_test], y_test),
     32     epochs=20, batch_size=batch_size
     33 )

File C:\ProgramData\Anaconda3\envs\tran\lib\site-packages\keras\src\utils\traceback_utils.py:122, in filter_traceback.<locals>.error_handler(*args, **kwargs)
    119     filtered_tb = _process_traceback_frames(e.__traceback__)
    120     # To get the full stack trace, call:
    121     # `keras.config.disable_traceback_filtering()`
--> 122     raise e.with_traceback(filtered_tb) from None
    123 finally:
    124     del filtered_tb

File C:\ProgramData\Anaconda3\envs\tran\lib\site-packages\optree\ops.py:766, in tree_map(func, tree, is_leaf, none_is_leaf, namespace, *rests)
    764 leaves, treespec = _C.flatten(tree, is_leaf, none_is_leaf, namespace)
    765 flat_args = [leaves] + [treespec.flatten_up_to(r) for r in rests]
--> 766 return treespec.unflatten(map(func, *flat_args))

ValueError: Invalid dtype: object
==============================================================================================================================================================================

import numpy as np

# Convert list-based columns into NumPy arrays
X_temporal = np.array(X_temporal.tolist(), dtype=np.float32)  # Convert list to 3D NumPy array
X_static = np.array(X_static.tolist(), dtype=np.float32)  # Convert static features to 2D NumPy array
y = np.array(y.tolist(), dtype=np.float32)  # Convert labels to array
========================================================================================================================================================================
import ast
import numpy as np

# Function to safely convert string lists into actual lists
def convert_str_to_list(col):
    return col.apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)

# Apply conversion
df["input_ids"] = convert_str_to_list(df["input_ids"])
df["attention_mask"] = convert_str_to_list(df["attention_mask"])

# Convert to NumPy arrays
X_temporal = np.array(df["input_ids"].tolist(), dtype=np.float32)  # 2D or 3D array
X_static = np.array(df["attention_mask"].tolist(), dtype=np.float32)  # 2D array

# Print shape
print(f"X_temporal shape: {X_temporal.shape}")  # Expected: (num_samples, time_steps)
print(f"X_static shape: {X_static.shape}")  # Expected: (num_samples, num_static_features)
===========================================================================================================================================================================
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In[15], line 26
     24 y=df.iloc[:,label_index].values
     25 # Convert to NumPy arrays
---> 26 X_temporal = np.array(df["input_ids"].tolist(), dtype=np.float32)  # 2D or 3D array
     27 X_static = np.array(df["attention_mask"].tolist(), dtype=np.float32)  # 2D array
     29 X_temporal = np.array(X_temporal.tolist(), dtype=np.float32)  # Convert list to 3D NumPy array

ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (58976,) + inhomogeneous part.

==============================================================================================================================================================================
df["input_ids"] = df["input_ids"].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)
df["attention_mask"] = df["attention_mask"].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)

# Find max length (or set a fixed length)
max_len = max(df["input_ids"].apply(len))  # Get max sequence length
print(f"Max sequence length: {max_len}")



X_temporal = pad_sequences(df["input_ids"], maxlen=max_len, padding="post", dtype="float32")
X_static = pad_sequences(df["attention_mask"], maxlen=max_len, padding="post", dtype="float32")

# Convert labels to NumPy array
y = np.array(df.iloc[:, label_index], dtype=np.float32)

# Print shapes to verify
print(f"X_temporal shape: {X_temporal.shape}")  # Expected: (num_samples, max_len)
print(f"X_static shape: {X_static.shape}")  # Expected: (num_samples, max_len)
print(f"y shape: {y.shape}")  # Expected: (num_samples,)



============================================================================================================================================================
ValueError                                Traceback (most recent call last)
Cell In[21], line 37
     35 # Compute ROC Curve
     36 y_test_prob = y_test_pred[:, 1]  # Probabilities for class 1
---> 37 fpr, tpr, _ = roc_curve(y_test_true, y_test_prob)
     38 roc_auc = auc(fpr, tpr)
     40 # Plot ROC Curve

File C:\ProgramData\Anaconda3\envs\tran\lib\site-packages\sklearn\utils\_param_validation.py:216, in validate_params.<locals>.decorator.<locals>.wrapper(*args, **kwargs)
    210 try:
    211     with config_context(
    212         skip_parameter_validation=(
    213             prefer_skip_nested_validation or global_skip_validation
    214         )
    215     ):
--> 216         return func(*args, **kwargs)
    217 except InvalidParameterError as e:
    218     # When the function is just a wrapper around an estimator, we allow
    219     # the function to delegate validation to the estimator, but we replace
    220     # the name of the estimator by the name of the function in the error
    221     # message to avoid confusion.
    222     msg = re.sub(
    223         r"parameter of \w+ must be",
    224         f"parameter of {func.__qualname__} must be",
    225         str(e),
    226     )

File C:\ProgramData\Anaconda3\envs\tran\lib\site-packages\sklearn\metrics\_ranking.py:1150, in roc_curve(y_true, y_score, pos_label, sample_weight, drop_intermediate)
   1046 @validate_params(
   1047     {
   1048         "y_true": ["array-like"],
   (...)
   1057     y_true, y_score, *, pos_label=None, sample_weight=None, drop_intermediate=True
   1058 ):
   1059     """Compute Receiver operating characteristic (ROC).
   1060 
   1061     Note: this implementation is restricted to the binary classification task.
   (...)
   1148     array([ inf, 0.8 , 0.4 , 0.35, 0.1 ])
   1149     """
-> 1150     fps, tps, thresholds = _binary_clf_curve(
   1151         y_true, y_score, pos_label=pos_label, sample_weight=sample_weight
   1152     )
   1154     # Attempt to drop thresholds corresponding to points in between and
   1155     # collinear with other points. These are always suboptimal and do not
   1156     # appear on a plotted ROC curve (and thus do not affect the AUC).
   (...)
   1161     # but does not drop more complicated cases like fps = [1, 3, 7],
   1162     # tps = [1, 2, 4]; there is no harm in keeping too many thresholds.
   1163     if drop_intermediate and len(fps) > 2:

File C:\ProgramData\Anaconda3\envs\tran\lib\site-packages\sklearn\metrics\_ranking.py:818, in _binary_clf_curve(y_true, y_score, pos_label, sample_weight)
    816 y_type = type_of_target(y_true, input_name="y_true")
    817 if not (y_type == "binary" or (y_type == "multiclass" and pos_label is not None)):
--> 818     raise ValueError("{0} format is not supported".format(y_type))
    820 check_consistent_length(y_true, y_score, sample_weight)
    821 y_true = column_or_1d(y_true)

ValueError: multiclass format is not supported


================================================================================================================================================================================from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import label_binarize

# Convert y_test_true to binary format (One-hot encoding)
y_test_binarized = label_binarize(y_test_true, classes=[0, 1, 2])  # Adjust classes

# Plot ROC Curve for each class
plt.figure(figsize=(8, 6))
for i in range(y_test_binarized.shape[1]):
    fpr, tpr, _ = roc_curve(y_test_binarized[:, i], y_test_pred[:, i])  # Class i
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, label=f'Class {i} (AUC = {roc_auc:.2f})')

# Finalize plot
plt.plot([0, 1], [0, 1], 'k--')  # Random guess line
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Multiclass ROC Curve")
plt.legend(loc="lower right")
plt.show()

============================
# Select probabilities of a single class (e.g., class 1)
y_test_prob = y_test_pred[:, 1]  

# Compute ROC Curve
fpr, tpr, _ = roc_curve(y_test_true, y_test_prob, pos_label=1)
roc_auc = auc(fpr, tpr)

# Plot ROC Curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f'Class 1 (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')  # Random guess line
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Binary ROC Curve")
plt.legend(loc="lower right")
plt.show()


















model.save("medical_lstm_model.h5")
